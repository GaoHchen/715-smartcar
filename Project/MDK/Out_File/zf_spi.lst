C51 COMPILER V9.57.0.0   ZF_SPI                                                            07/17/2020 10:29:32 PAGE 1   


C51 COMPILER V9.57.0.0, COMPILATION OF MODULE ZF_SPI
OBJECT MODULE PLACED IN .\Out_File\zf_spi.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\..\Libraries\seekfree_libraries\zf_spi.c LARGE OMF2 OPTIMIZE(8,SPEED)
                    - INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\USER\inc;..\
                    -USER\src;..\CODE) PRINT(.\Out_File\zf_spi.lst) TABS(2) OBJECT(.\Out_File\zf_spi.obj)

line level    source

   1          /*********************************************************************************************************
             -************
   2           * COPYRIGHT NOTICE
   3           * Copyright (c) 2020,逐飞科技
   4           * All rights reserved.
   5           * 技术讨论QQ群：一群：179029047(已满)  二群：244861897(已满)  三群：824575535
   6           *
   7           * 以下所有内容版权均属逐飞科技所有，未经允许不得用于商业用途，
   8           * 欢迎各位使用并传播本程序，修改内容时必须保留逐飞科技的版权声明。
   9           *
  10           * @file          spi
  11           * @company       成都逐飞科技有限公司
  12           * @author        逐飞科技(QQ790875685)
  13           * @version       查看doc内version文件 版本说明
  14           * @Software    MDK FOR C51 V9.60
  15           * @Target core   STC8G2K64S4
  16           * @Taobao      https://seekfree.taobao.com/
  17           * @date          2020-4-14
  18           *********************************************************************************************************
             -***********/
  19          
  20          #include "zf_gpio.h"
  21          #include "zf_spi.h"
  22          
  23          //--------------------------------------------------------------------------------------------------------
             ------------
  24          //  @brief      spi初始化函数(ss引脚由软件控制)
  25          //  @param      spi_n     选择SPI模块(SPI_1-SPI_4)
  26          //  @param      sck_pin     选择SCK引脚
  27          //  @param      mosi_pin    选择MOSI引脚
  28          //  @param      miso_pin    选择MISO引脚
  29          //  @param      mstr      主从选择
  30          //  @param      mode            SPI模式 0：CPOL=0 CPHA=0    1：CPOL=0 CPHA=1   2：CPOL=1 CPHA=0   3：CPOL=
             -1 CPHA=1 //具体细节可自行百度
  31          //  @param      baud      速率选择
  32          //  @since      v1.0
  33          //  Sample usage:       spi_init(SPI_1,SPI1_SCLK_P15, SPI1_MOSI_P13,SPI1_MISO_P14,MASTER,SYSclk_DIV_4); 
  34          //                //初始化SPI1,主机模式,速率为系统频率/4，SCLK引脚P1.5 MOSI引脚P1.3 MISO引脚P1.4
  35          //--------------------------------------------------------------------------------------------------------
             ------------
  36          void spi_init(SPIN_enum spi_n,
  37                  SPI_PIN_enum sck_pin, 
  38                  SPI_PIN_enum mosi_pin, 
  39                  SPI_PIN_enum miso_pin, 
  40                  uint8 mode,
  41                  SPI_MSTR_enum mstr,
  42                  SPI_BAUD_enum baud)
  43          {
  44   1      
  45   1        sck_pin = sck_pin;
  46   1        mosi_pin = mosi_pin;
  47   1        miso_pin = miso_pin;
  48   1        
C51 COMPILER V9.57.0.0   ZF_SPI                                                            07/17/2020 10:29:32 PAGE 2   

  49   1      
  50   1        
  51   1      switch(spi_n)
  52   1          {
  53   2          //IO口需要配置为：准双向口（传统8051端口模式，弱上拉）
  54   2          case SPI_1:
  55   2            gpio_mode(P1_3,GPIO);
  56   2            gpio_mode(P1_4,GPIO);
  57   2            gpio_mode(P1_5,GPIO);
  58   2            gpio_pull_set(P1_3,PULLUP);
  59   2            gpio_pull_set(P1_4,NOPULL);
  60   2            gpio_pull_set(P1_5,PULLUP);
  61   2            break;
  62   2          case SPI_2:
  63   2            gpio_mode(P2_3,GPIO);
  64   2            gpio_mode(P2_4,GPIO);
  65   2            gpio_mode(P2_5,GPIO);
  66   2            gpio_pull_set(P2_3,PULLUP);
  67   2            gpio_pull_set(P2_4,NOPULL);
  68   2            gpio_pull_set(P2_5,PULLUP);
  69   2            break;
  70   2          case SPI_3:
  71   2            gpio_mode(P4_0,GPIO);
  72   2            gpio_mode(P4_1,GPIO);
  73   2            gpio_mode(P4_3,GPIO);
  74   2            gpio_pull_set(P4_0,PULLUP);
  75   2            gpio_pull_set(P4_1,NOPULL);
  76   2            gpio_pull_set(P4_3,PULLUP);
  77   2            break;
  78   2          case SPI_4:
  79   2            gpio_mode(P3_4,GPIO);
  80   2            gpio_mode(P3_3,GPIO);
  81   2            gpio_mode(P3_2,GPIO);
  82   2            gpio_pull_set(P3_4,PULLUP);
  83   2            gpio_pull_set(P3_3,NOPULL);
  84   2            gpio_pull_set(P3_2,PULLUP);
  85   2            break;
  86   2          }
  87   1        
  88   1        P_SW1 &= ~(0x03<<2);  //清除SPI功能脚选择位
  89   1          switch(spi_n)
  90   1          {
  91   2          case SPI_1:
  92   2              P_SW1 |= (0x00<<2);
  93   2              break;
  94   2          case SPI_2:
  95   2              P_SW1 |= (0x01<<2);
  96   2              break;
  97   2          case SPI_3:
  98   2              P_SW1 |= (0x02<<2);
  99   2              break;
 100   2          case SPI_4:
 101   2              P_SW1 |= (0x03<<2);
 102   2              break;
 103   2          }
 104   1        
 105   1        SPCTL &= 0xF3;    //清除SPI极性和相位
 106   1        switch(mode)
 107   1        {
 108   2        case 0:
 109   2          
 110   2          break;
C51 COMPILER V9.57.0.0   ZF_SPI                                                            07/17/2020 10:29:32 PAGE 3   

 111   2        case 1:
 112   2          SPCTL |= 0x01<<2;
 113   2          break;
 114   2        case 2:
 115   2          SPCTL |= 0x02<<2;
 116   2          break;
 117   2        case 3:
 118   2          SPCTL |= 0x03<<2;
 119   2          break;
 120   2        }
 121   1          
 122   1        
 123   1        SPCTL |= baud;    //速率设定
 124   1      
 125   1          if(mstr == MASTER)
 126   1          {
 127   2              SPCTL |= 1<<7;  //忽略SS引脚功能，使用MSTR确定器件是主机还是从机
 128   2              SPCTL |= 1<<4;  //主机模式
 129   2          }
 130   1          else
 131   1          {
 132   2              //不做操作
 133   2          }
 134   1          SPCTL |= 1<<6;    //使能SPI功能
 135   1      }
 136          
 137          
 138          
 139          //--------------------------------------------------------------------------------------------------------
             ------------
 140          //  @brief      SPI发送接收函数
 141          //  @param      dat           发送的数据
 142          //  @since      v1.0
 143          //  Sample usage:       buf_1 = spi_mosi(SPI_1,1,buf);    //发送buff的内容，并接收到buf_1里，长度为1字节
 144          //--------------------------------------------------------------------------------------------------------
             ------------
 145          uint8 spi_mosi(uint8 dat)
 146          {
 147   1          SPDAT = dat;          //DATA寄存器赋值
 148   1          while (!(SPSTAT & 0x80));     //查询完成标志
 149   1          SPSTAT = 0xc0;                  //清中断标志
 150   1        return SPDAT;
 151   1      }
 152          
 153          
 154          //--------------------------------------------------------------------------------------------------------
             ------------
 155          //  @brief      spi引脚切换函数(ss引脚由软件控制)
 156          //  @param      spi_n     选择SPI模块(SPI_1-SPI_4)
 157          //  @param      sck_pin     选择SCK引脚
 158          //  @param      mosi_pin    选择MOSI引脚
 159          //  @param      miso_pin    选择MISO引脚
 160          //  Sample usage:       spi_change_pin(SPI_1,SPI1_SCLK_P15, SPI1_MOSI_P13,SPI1_MISO_P14); 
 161          //                //切换SPI引脚
 162          //--------------------------------------------------------------------------------------------------------
             ------------
 163          void spi_change_pin(SPIN_enum spi_n, SPI_PIN_enum sck_pin, SPI_PIN_enum mosi_pin, SPI_PIN_enum miso_pin)
 164          {
 165   1        sck_pin = sck_pin;
 166   1        mosi_pin = mosi_pin;
 167   1        miso_pin = miso_pin;
 168   1        
C51 COMPILER V9.57.0.0   ZF_SPI                                                            07/17/2020 10:29:32 PAGE 4   

 169   1          P_SW1 &= ~(0x03<<2);  //清除SPI功能脚选择位
 170   1        switch(spi_n)
 171   1          {
 172   2          //IO口需要配置为：准双向口（传统8051端口模式，弱上拉）
 173   2          case SPI_1:
 174   2            gpio_mode(P1_3,GPIO);
 175   2            gpio_mode(P1_4,GPIO);
 176   2            gpio_mode(P1_5,GPIO);
 177   2            gpio_pull_set(P1_3,PULLUP);
 178   2            gpio_pull_set(P1_4,NOPULL);
 179   2            gpio_pull_set(P1_5,PULLUP);
 180   2            break;
 181   2          case SPI_2:
 182   2            gpio_mode(P2_3,GPIO);
 183   2            gpio_mode(P2_4,GPIO);
 184   2            gpio_mode(P2_5,GPIO);
 185   2            gpio_pull_set(P2_3,PULLUP);
 186   2            gpio_pull_set(P2_4,NOPULL);
 187   2            gpio_pull_set(P2_5,PULLUP);
 188   2            break;
 189   2          case SPI_3:
 190   2            gpio_mode(P4_0,GPIO);
 191   2            gpio_mode(P4_1,GPIO);
 192   2            gpio_mode(P4_3,GPIO);
 193   2            gpio_pull_set(P4_0,PULLUP);
 194   2            gpio_pull_set(P4_1,NOPULL);
 195   2            gpio_pull_set(P4_3,PULLUP);
 196   2            break;
 197   2          case SPI_4:
 198   2            gpio_mode(P3_4,GPIO);
 199   2            gpio_mode(P3_3,GPIO);
 200   2            gpio_mode(P3_2,GPIO);
 201   2            gpio_pull_set(P3_4,PULLUP);
 202   2            gpio_pull_set(P3_3,NOPULL);
 203   2            gpio_pull_set(P3_2,PULLUP);
 204   2            break;
 205   2          }
 206   1      
 207   1          switch(spi_n)
 208   1          {
 209   2          case SPI_1:
 210   2              P_SW1 |= (0x00<<2);
 211   2              break;
 212   2          case SPI_2:
 213   2              P_SW1 |= (0x01<<2);
 214   2              break;
 215   2          case SPI_3:
 216   2              P_SW1 |= (0x02<<2);
 217   2              break;
 218   2          case SPI_4:
 219   2              P_SW1 |= (0x03<<2);
 220   2              break;
 221   2          }
 222   1      }
 223          
 224          
 225          
 226          //--------------------------------------------------------------------------------------------------------
             ------------
 227          //  @brief      spi模式切换函数
 228          //  @param      mode            SPI模式 0：CPOL=0 CPHA=0    1：CPOL=0 CPHA=1   2：CPOL=1 CPHA=0   3：CPOL=
             -1 CPHA=1 //具体细节可自行百度
C51 COMPILER V9.57.0.0   ZF_SPI                                                            07/17/2020 10:29:32 PAGE 5   

 229          //  Sample usage:       
 230          //--------------------------------------------------------------------------------------------------------
             ------------
 231          void spi_change_mode(uint8 mode)
 232          {
 233   1        SPCTL &= 0xF7;    //清除SPI极性和相位
 234   1        switch(mode)
 235   1        {
 236   2        case 0:
 237   2          
 238   2          break;
 239   2        case 1:
 240   2          SPCTL |= 0x01<<2;
 241   2          break;
 242   2        case 2:
 243   2          SPCTL |= 0x02<<2;
 244   2          break;
 245   2        case 3:
 246   2          SPCTL |= 0x03<<2;
 247   2          break;
 248   2        }
 249   1      }
 250          
 251          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    536    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      11
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
